#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n#t/* Create the semaphores(s) */
#t/* creation of myBinarySem01 */
#tmyBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
#n
#t/* creation of myBinarySem02 */
#tmyBinarySem02Handle = osSemaphoreNew(1, 1, &myBinarySem02_attributes);
#n
#t/* creation of GyroBinSem */
#tGyroBinSemHandle = osSemaphoreNew(1, 1, &GyroBinSem_attributes);
#n
#t/* creation of myCountingSem01 */
#tmyCountingSem01Handle = osSemaphoreNew(10, 10, &myCountingSem01_attributes);
#n
#t/* creation of GyroCountingSem */
#tGyroCountingSemHandle = osSemaphoreNew(2, 2, &GyroCountingSem_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n#t/* Create the queue(s) */
#t/* creation of GyroQueue */
#tGyroQueueHandle = osMessageQueueNew (30, sizeof(uint16_t), &GyroQueue_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
#n#t/* Create the thread(s) */
#t/* creation of defaultTask */
#tdefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
#n
#t/* creation of I2CScan */
#tI2CScanHandle = osThreadNew(I2CScanTask, NULL, &I2CScan_attributes);
#n
#t/* creation of ChannelControlT */
#tChannelControlTHandle = osThreadNew(ChannelControl, NULL, &ChannelControlT_attributes);
#n
#t/* creation of IndicationTask */
#tIndicationTaskHandle = osThreadNew(Indication, NULL, &IndicationTask_attributes);
#n
#t/* creation of ButtonControlTa */
#tButtonControlTaHandle = osThreadNew(ButtonControl, NULL, &ButtonControlTa_attributes);
#n
#t/* creation of CanControlTask */
#tCanControlTaskHandle = osThreadNew(CanControl, NULL, &CanControlTask_attributes);
#n
#t/* creation of ControlModeDevT */
#tControlModeDevTHandle = osThreadNew(ControlModeDev, NULL, &ControlModeDevT_attributes);
#n
#t/* creation of InclineControlT */
#tInclineControlTHandle = osThreadNew(InclineControl, NULL, &InclineControlT_attributes);
#n
#t/* creation of TimeTask */
#tTimeTaskHandle = osThreadNew(TimeControl, NULL, &TimeTask_attributes);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
#n
#t/* USER CODE BEGIN RTOS_EVENTS */
#t/* add events, ... */
#t/* USER CODE END RTOS_EVENTS */
#n
